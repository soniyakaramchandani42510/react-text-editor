{"version":3,"sources":["components/Navbar.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","type","id","onClick","togglemode","for","useState","text","setText","style","color","heading","value","cols","rows","onChange","event","console","log","target","backgroundColor","newText","toUpperCase","toLowerCase","split","length","App","setmode","document","body","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d8f25473.chunk.js","sourcesContent":["import React from 'react'\r\n// import { Link } from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n    return (\r\n      \r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">Navbar</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#\">About</a>\r\n        </li> */}\r\n      \r\n      </ul>\r\n      <div className={`form-check form-switch  text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" for=\"flexSwitchCheckDefault\">Enable light mode</label>\r\n</div>\r\n\r\n\r\n    \r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState} from \"react\";\r\n\r\nexport default function Navbar(props) {\r\n    const [text, setText] = useState('');\r\n//    settext(\"new soniya\");\r\nconst handleupclick =()=>{\r\n    console.log(\"button pressed\"+text);\r\n    let newText= text.toUpperCase();\r\n   \r\n    setText(newText);\r\n   \r\n    \r\n}\r\nconst handleloclick =()=>{\r\n    console.log(\"button pressed\"+text);\r\n    let newText= text.toLowerCase();\r\n    setText(newText);\r\n  \r\n}\r\nconst handleclearclick =()=>{\r\n    console.log('hey');\r\n    let newText= \"\";\r\n    setText(newText);\r\n    \r\n}\r\n\r\n\r\nconst fire =(event)=>{\r\n    console.log(\"hey soniya\");\r\n    setText(event.target.value);\r\n}\r\n    return (\r\n        \r\n       <>\r\n      \r\n      \r\n       <div className=\"container\" style= {{color:props.mode==='light'?'black':'white'}} >\r\n          \r\n  \r\n       <h1 className=\"my-3\">{props.heading}</h1>\r\n  <div className=\"mb-3 my-3 container\"  style= {{color:props.mode==='light'?'black':'white'}}>\r\n   <textarea value={text} id=\"mybox\" cols=\"30\" rows=\"10\" className=\"form-control container\" onChange={fire} style= {{backgroundColor:props.mode==='light'?'white':'black',color:props.mode==='light'?'black':'white'}}>\r\n\r\n   </textarea>\r\n  </div>\r\n  \r\n<button className=\"btn btn-primary mx-2\" onClick={handleupclick}>\r\nconvert to uppercase\r\n</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleloclick}>\r\nconvert to lowercase\r\n</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleclearclick}>\r\nClear text\r\n</button>\r\n\r\n       </div>\r\n       <div className=\"container\" style= {{color:props.mode==='light'?'black':'white'}}>\r\n      <h1>text analysis</h1>\r\n      <p> {text.split(\" \").length} words {text.length}  charcters</p>\r\n      <p>\r\n          {0.08 * text.split(\" \").length} minutes to read\r\n      </p>\r\n    </div>\r\n       </>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\n\nimport Navbar from './components/Navbar'; \n\nimport Textform from './components/Textform'; \n//  import About from './components/About';\nimport React from \"react\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n  \n// } from \"react-router-dom\";\n \nimport { useState } from 'react';\nfunction App() {\n  \n  const  [mode, setmode] = useState('light'); \n  \n  const togglemode=()=>{\n    if (mode==='light')\n    {\n     setmode('dark');\n     document.body.style.backgroundColor='black';\n    document.title='Text editor:dark mode';\n     \n    }\n    else\n    {\n      setmode('light');\n      document.body.style.backgroundColor='white';\n      document.title='Text editor:light mode';\n      \n    \n    }\n  }\n \n  return (\n   <>  \n   {/* <Router> */}\n       <Navbar mode={mode} togglemode={togglemode}/>\n       \n       {/* <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          \n          <Route path=\"/\"> */}\n          <Textform heading =\"text to analyse\"  mode={mode}/>\n{/*             \n          </Route>\n        </Switch>\n        </Router> */}\n    \n\n\n    \n   \n   \n    \n  \n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}